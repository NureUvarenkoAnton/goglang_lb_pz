// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: pet.sql

package core

import (
	"context"
	"database/sql"
)

const addPet = `-- name: AddPet :exec
INSERT INTO pets 
  (owner_id, name, age, additional_info)
VALUES 
  (?, ?, ?, ?)
`

type AddPetParams struct {
	OwnerID        sql.NullInt64
	Name           sql.NullString
	Age            sql.NullInt16
	AdditionalInfo sql.NullString
}

func (q *Queries) AddPet(ctx context.Context, arg AddPetParams) error {
	_, err := q.db.ExecContext(ctx, addPet,
		arg.OwnerID,
		arg.Name,
		arg.Age,
		arg.AdditionalInfo,
	)
	return err
}

const deletePet = `-- name: DeletePet :exec
DELETE FROM pets
WHERE id = ?
`

func (q *Queries) DeletePet(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePet, id)
	return err
}

const getAllPetsByOwnerId = `-- name: GetAllPetsByOwnerId :many
SELECT id, owner_id, name, age, additional_info FROM pets
WHERE owner_id = ?
`

func (q *Queries) GetAllPetsByOwnerId(ctx context.Context, ownerID sql.NullInt64) ([]Pet, error) {
	rows, err := q.db.QueryContext(ctx, getAllPetsByOwnerId, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Pet
	for rows.Next() {
		var i Pet
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.Name,
			&i.Age,
			&i.AdditionalInfo,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPetById = `-- name: GetPetById :one
SELECT id, owner_id, name, age, additional_info FROM pets
WHERE id = ?
`

func (q *Queries) GetPetById(ctx context.Context, id int64) (Pet, error) {
	row := q.db.QueryRowContext(ctx, getPetById, id)
	var i Pet
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Name,
		&i.Age,
		&i.AdditionalInfo,
	)
	return i, err
}

const getTheMostWalkeblePetByOwnerID = `-- name: GetTheMostWalkeblePetByOwnerID :one
select pet_id, pet_name, count(pet_id) as s from walk_info
where owner_id = ?
group by pet_id
order by s desc
limit 1
`

type GetTheMostWalkeblePetByOwnerIDRow struct {
	PetID   int64
	PetName sql.NullString
	S       int64
}

func (q *Queries) GetTheMostWalkeblePetByOwnerID(ctx context.Context, ownerID int64) (GetTheMostWalkeblePetByOwnerIDRow, error) {
	row := q.db.QueryRowContext(ctx, getTheMostWalkeblePetByOwnerID, ownerID)
	var i GetTheMostWalkeblePetByOwnerIDRow
	err := row.Scan(&i.PetID, &i.PetName, &i.S)
	return i, err
}

const updatePet = `-- name: UpdatePet :exec
UPDATE pets
SET
  name = ?,
  age = ?,
  additional_info = ?
WHERE
  id = ?
`

type UpdatePetParams struct {
	Name           sql.NullString
	Age            sql.NullInt16
	AdditionalInfo sql.NullString
	ID             int64
}

func (q *Queries) UpdatePet(ctx context.Context, arg UpdatePetParams) error {
	_, err := q.db.ExecContext(ctx, updatePet,
		arg.Name,
		arg.Age,
		arg.AdditionalInfo,
		arg.ID,
	)
	return err
}
