// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: rating.sql

package core

import (
	"context"
	"database/sql"
)

const addRating = `-- name: AddRating :exec
INSERT INTO ratings
  (rater_id, ratee_id, value)
VALUES
  (?, ?, ?)
`

type AddRatingParams struct {
	RaterID sql.NullInt64
	RateeID sql.NullInt64
	Value   sql.NullInt32
}

func (q *Queries) AddRating(ctx context.Context, arg AddRatingParams) error {
	_, err := q.db.ExecContext(ctx, addRating, arg.RaterID, arg.RateeID, arg.Value)
	return err
}

const ratingByIds = `-- name: RatingByIds :one
SELECT rater_id, ratee_id, value FROM ratings
WHERE ratee_id = ? AND rater_id = ?
`

type RatingByIdsParams struct {
	RateeID sql.NullInt64
	RaterID sql.NullInt64
}

func (q *Queries) RatingByIds(ctx context.Context, arg RatingByIdsParams) (Rating, error) {
	row := q.db.QueryRowContext(ctx, ratingByIds, arg.RateeID, arg.RaterID)
	var i Rating
	err := row.Scan(&i.RaterID, &i.RateeID, &i.Value)
	return i, err
}

const ratingsByRateeId = `-- name: RatingsByRateeId :many
SELECT rater_id, ratee_id, value FROM ratings
WHERE ratee_id = ?
`

func (q *Queries) RatingsByRateeId(ctx context.Context, rateeID sql.NullInt64) ([]Rating, error) {
	rows, err := q.db.QueryContext(ctx, ratingsByRateeId, rateeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Rating
	for rows.Next() {
		var i Rating
		if err := rows.Scan(&i.RaterID, &i.RateeID, &i.Value); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ratingsByRaterId = `-- name: RatingsByRaterId :many
SELECT rater_id, ratee_id, value FROM ratings
WHERE rater_id = ?
`

func (q *Queries) RatingsByRaterId(ctx context.Context, raterID sql.NullInt64) ([]Rating, error) {
	rows, err := q.db.QueryContext(ctx, ratingsByRaterId, raterID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Rating
	for rows.Next() {
		var i Rating
		if err := rows.Scan(&i.RaterID, &i.RateeID, &i.Value); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
