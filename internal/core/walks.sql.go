// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: walks.sql

package core

import (
	"context"
	"database/sql"
)

const createWalk = `-- name: CreateWalk :exec
INSERT INTO walks
  (owner_id, walker_id, pet_id, start_time, state)
VALUES
  (?, ?, ?, ?, 'pending')
`

type CreateWalkParams struct {
	OwnerID   sql.NullInt64
	WalkerID  sql.NullInt64
	PetID     sql.NullInt64
	StartTime sql.NullTime
}

func (q *Queries) CreateWalk(ctx context.Context, arg CreateWalkParams) error {
	_, err := q.db.ExecContext(ctx, createWalk,
		arg.OwnerID,
		arg.WalkerID,
		arg.PetID,
		arg.StartTime,
	)
	return err
}

const getWalkById = `-- name: GetWalkById :one
SELECT id, owner_id, walker_id, pet_id, start_time, finish_time, state FROM walks
WHERE id = ?
`

func (q *Queries) GetWalkById(ctx context.Context, id int64) (Walk, error) {
	row := q.db.QueryRowContext(ctx, getWalkById, id)
	var i Walk
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.WalkerID,
		&i.PetID,
		&i.StartTime,
		&i.FinishTime,
		&i.State,
	)
	return i, err
}

const getWalkInfoByParams = `-- name: GetWalkInfoByParams :many
SELECT walk_id, start_time, finish_time, state, owner_id, owner_name, owner_email, walker_id, walker_name, walker_email, pet_id, pet_name, pet_age, pet_additional_info, walk_state FROM walk_info
WHERE
(? IS NULL OR owner_id = ?) AND
(? IS NULL OR walker_id = ?) AND
(? IS NULL OR pet_id = ?) AND
(? IS NULL OR state = ?)
`

type GetWalkInfoByParamsParams struct {
	OwnerID   sql.NullInt64
	WalkerID  sql.NullInt64
	PetID     sql.NullInt64
	WalkState NullWalksState
}

func (q *Queries) GetWalkInfoByParams(ctx context.Context, arg GetWalkInfoByParamsParams) ([]WalkInfo, error) {
	rows, err := q.db.QueryContext(ctx, getWalkInfoByParams,
		arg.OwnerID,
		arg.OwnerID,
		arg.WalkerID,
		arg.WalkerID,
		arg.PetID,
		arg.PetID,
		arg.WalkState,
		arg.WalkState,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []WalkInfo
	for rows.Next() {
		var i WalkInfo
		if err := rows.Scan(
			&i.WalkID,
			&i.StartTime,
			&i.FinishTime,
			&i.State,
			&i.OwnerID,
			&i.OwnerName,
			&i.OwnerEmail,
			&i.WalkerID,
			&i.WalkerName,
			&i.WalkerEmail,
			&i.PetID,
			&i.PetName,
			&i.PetAge,
			&i.PetAdditionalInfo,
			&i.WalkState,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWalkInfoByWalkId = `-- name: GetWalkInfoByWalkId :one
SELECT walk_id, start_time, finish_time, state, owner_id, owner_name, owner_email, walker_id, walker_name, walker_email, pet_id, pet_name, pet_age, pet_additional_info, walk_state FROM walk_info
WHERE walk_id = ?
`

func (q *Queries) GetWalkInfoByWalkId(ctx context.Context, walkID int64) (WalkInfo, error) {
	row := q.db.QueryRowContext(ctx, getWalkInfoByWalkId, walkID)
	var i WalkInfo
	err := row.Scan(
		&i.WalkID,
		&i.StartTime,
		&i.FinishTime,
		&i.State,
		&i.OwnerID,
		&i.OwnerName,
		&i.OwnerEmail,
		&i.WalkerID,
		&i.WalkerName,
		&i.WalkerEmail,
		&i.PetID,
		&i.PetName,
		&i.PetAge,
		&i.PetAdditionalInfo,
		&i.WalkState,
	)
	return i, err
}

const getWalksByOwnerAndWalkerIds = `-- name: GetWalksByOwnerAndWalkerIds :many
SELECT id, owner_id, walker_id, pet_id, start_time, finish_time, state FROM walks
WHERE walker_id = ? AND 
      owner_id = ?
`

type GetWalksByOwnerAndWalkerIdsParams struct {
	WalkerID sql.NullInt64
	OwnerID  sql.NullInt64
}

func (q *Queries) GetWalksByOwnerAndWalkerIds(ctx context.Context, arg GetWalksByOwnerAndWalkerIdsParams) ([]Walk, error) {
	rows, err := q.db.QueryContext(ctx, getWalksByOwnerAndWalkerIds, arg.WalkerID, arg.OwnerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Walk
	for rows.Next() {
		var i Walk
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.WalkerID,
			&i.PetID,
			&i.StartTime,
			&i.FinishTime,
			&i.State,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWalksByOwnerId = `-- name: GetWalksByOwnerId :many
SELECT id, owner_id, walker_id, pet_id, start_time, finish_time, state FROM walks
WHERE owner_id = ?
`

func (q *Queries) GetWalksByOwnerId(ctx context.Context, ownerID sql.NullInt64) ([]Walk, error) {
	rows, err := q.db.QueryContext(ctx, getWalksByOwnerId, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Walk
	for rows.Next() {
		var i Walk
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.WalkerID,
			&i.PetID,
			&i.StartTime,
			&i.FinishTime,
			&i.State,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWalksByParams = `-- name: GetWalksByParams :many
SELECT id, owner_id, walker_id, pet_id, start_time, finish_time, state FROM walks
WHERE
(? IS NULL OR owner_id = ?) AND
(? IS NULL OR walker_id = ?) AND
(? IS NULL OR pet_id = ?) AND
(? IS NULL OR state = ?)
`

type GetWalksByParamsParams struct {
	OwnerID   sql.NullInt64
	WalkerID  sql.NullInt64
	PetID     sql.NullInt64
	WalkState NullWalksState
}

func (q *Queries) GetWalksByParams(ctx context.Context, arg GetWalksByParamsParams) ([]Walk, error) {
	rows, err := q.db.QueryContext(ctx, getWalksByParams,
		arg.OwnerID,
		arg.OwnerID,
		arg.WalkerID,
		arg.WalkerID,
		arg.PetID,
		arg.PetID,
		arg.WalkState,
		arg.WalkState,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Walk
	for rows.Next() {
		var i Walk
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.WalkerID,
			&i.PetID,
			&i.StartTime,
			&i.FinishTime,
			&i.State,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWalksByWalkerId = `-- name: GetWalksByWalkerId :many
SELECT id, owner_id, walker_id, pet_id, start_time, finish_time, state FROM walks
WHERE walker_id = ?
`

func (q *Queries) GetWalksByWalkerId(ctx context.Context, walkerID sql.NullInt64) ([]Walk, error) {
	rows, err := q.db.QueryContext(ctx, getWalksByWalkerId, walkerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Walk
	for rows.Next() {
		var i Walk
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.WalkerID,
			&i.PetID,
			&i.StartTime,
			&i.FinishTime,
			&i.State,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWalkState = `-- name: UpdateWalkState :exec
UPDATE walks
SET 
  state = ?,
  finish_time = ?
WHERE
  id = ?
`

type UpdateWalkStateParams struct {
	State      NullWalksState
	FinishTime sql.NullTime
	ID         int64
}

func (q *Queries) UpdateWalkState(ctx context.Context, arg UpdateWalkStateParams) error {
	_, err := q.db.ExecContext(ctx, updateWalkState, arg.State, arg.FinishTime, arg.ID)
	return err
}
